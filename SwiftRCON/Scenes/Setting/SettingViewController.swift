//
//  SettingViewController.swift
//  SwiftRCON
//
//  Created by LeeSeGun on 2022/01/18.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingDisplayLogic: AnyObject {
    func displaySomething(viewModel: Setting.Something.ViewModel)
}

class SettingViewController: UITableViewController, SettingDisplayLogic {
    var interactor: SettingBusinessLogic?
    var router: (NSObjectProtocol & SettingRoutingLogic & SettingDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SettingInteractor()
        let presenter = SettingPresenter()
        let router = SettingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTextFields()
        doSomething()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        updateServerInfo()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = Setting.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Setting.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    // MARK: -
    @IBOutlet weak var ipTextField: UITextField!
    @IBOutlet weak var portTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    
    func setupTextFields() {
        [ipTextField, portTextField, passwordTextField].forEach { $0?.delegate = self }
    }
    
    @IBAction func didTapSaveAndConnectButton(_ sender: Any) {
        view.endEditing(true)
        
        guard let ip = ipTextField.text, !ip.isEmpty else {
            AlertProvider.message(title: "Alert", message: "Please enter the SERVER IP")
            return
        }
        guard let port = portTextField.text, !port.isEmpty else {
            AlertProvider.message(title: "Alert", message: "Please enter the RCON Port")
            return
        }
        guard port.isNumber, let portValue = Int(port), portValue < 65535 else {
            AlertProvider.message(title: "Alert", message: "Please enter the right RCON Port (0 ~ 65535)")
            return
        }
        guard let password = passwordTextField.text, !password.isEmpty else {
            AlertProvider.message(title: "Alert", message: "Please enter the RCON Password")
            return
        }
        interactor?.saveServerInfo(request: .init(ip: ip, port: port, password: password))
    }
    
    func updateServerInfo() {
        ipTextField.text = UserDefaults.standard.value(forKey: "_SIP") as? String
        portTextField.text = UserDefaults.standard.value(forKey: "_SPT") as? String
        passwordTextField.text = UserDefaults.standard.value(forKey: "_PW") as? String
    }
}

extension SettingViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}
