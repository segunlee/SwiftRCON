//
//  ChatInteractor.swift
//  SwiftRCON
//
//  Created by LeeSeGun on 2022/01/11.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatBusinessLogic {
    func fetchChat(request: Chat.FetchChat.Request)
    func receiveChat(request: Chat.ReceiveChat.Request)
}

protocol ChatDataStore {
    
}

class ChatInteractor: ChatBusinessLogic, ChatDataStore {
    var presenter: ChatPresentationLogic?
    var worker: ChatWorker?
    
    
    // MARK: Do something
    func fetchChat(request: Chat.FetchChat.Request) {
        guard let activeSocket = activeSocket else { return }
        guard activeSocket.isConnected else { return }

        activeSocket.requestChatTail { [weak self] chats, error in
            if let error = error {
                print(error)
                return
            }
            
//            var id = 0
//            var users = [ChatUser]()
//            let collect: [ChatMessage] = chats.compactMap { rustChat in
//                id += 1
//
//                let user: ChatUser
//                if let _user = users.filter({$0.displayName == rustChat.username}).first {
//                    user = _user
//                } else {
//                    user = ChatUser(displayName: rustChat.username, avatar: UIImage(systemName: "person.crop.circle.fill"), isSender: rustChat.userId == "0")
//                    users.append(user)
//                }
//
//                return ChatMessage(id: id, body: .text(rustChat.message), user: user, sentAt: rustChat.getDate())
//            }
            
//            self?.presenter?.presentFetchChat(response: .init(chats: collect))
        }
    }
    
    func receiveChat(request: Chat.ReceiveChat.Request) {
        guard let activeSocket = activeSocket else { return }
        guard activeSocket.isConnected else { return }
        
        activeSocket.requestChatRealtime { [weak self] chat, error in
            if let error = error {
                print(error)
                return
            }
            
            guard let chat = chat else {
                return
            }
            
//            let user = ChatUser(displayName: chat.username, avatar: UIImage(systemName: "person.crop.circle.fill"), isSender: chat.userId == "0")
//            let message = ChatMessage(id: 9999, body: .text(chat.message), user: user, sentAt: chat.getDate())
//            self?.presenter?.presentReceiveChat(response: .init(message: message))
        }
    }
}
