//
//  ConsoleViewController.swift
//  SwiftRCON
//
//  Created by LeeSeGun on 2022/01/10.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import KeyboardLayoutGuide

protocol ConsoleDisplayLogic: AnyObject {
    func displayFetchLogs(viewModel: Console.FetchLog.ViewModel)
    func displayRealtimeLogs(viewModel: Console.FetchLog.ViewModel)
}

class ConsoleViewController: UIViewController, ConsoleDisplayLogic {
    var interactor: ConsoleBusinessLogic?
    var router: (NSObjectProtocol & ConsoleRoutingLogic & ConsoleDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ConsoleInteractor()
        let presenter = ConsolePresenter()
        let router = ConsoleRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Console"
        setupInputView()
        handleNotifications()
        interactor?.fetchLogs(requst: .init())
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: UIResponder.keyboardWillShowNotification, object: nil)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        consoleTextView.scrollToBottom()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
    }
    

    // MARK: Noticication
    func handleNotifications() {
        NotificationCenter.default.addObserver(forName: .SocketDidConnect, object: nil, queue: .main) { [weak self] _ in
            self?.viewModel = nil
            self?.interactor?.fetchLogs(requst: .init())
        }
        NotificationCenter.default.addObserver(forName: .SocketDidDisconnect, object: nil, queue: .main) { [weak self] _ in
            self?.viewModel = nil
        }
    }
    
    
    // MARK: - C
    var viewModel: Console.FetchLog.ViewModel?
    @IBOutlet weak var consoleTextView: UITextView!
    
    func displayFetchLogs(viewModel: Console.FetchLog.ViewModel) {
        self.viewModel = viewModel
        addLogToConsoleTextView(attr: viewModel.makeAttributedString(), isInit: true)
        interactor?.realtimeLog(request: .init())
    }
    
    func displayRealtimeLogs(viewModel: Console.FetchLog.ViewModel) {
        self.viewModel?.logs.append(contentsOf: viewModel.logs)
        addLogToConsoleTextView(attr: viewModel.makeAttributedString(), isInit: false)
    }
    
    func addLogToConsoleTextView(attr: NSAttributedString, isInit: Bool = false) {
        if isInit { consoleTextView.attributedText = attr }
        else {
            guard let old = consoleTextView.attributedText else { return }
            let str = NSMutableAttributedString(attributedString: old)
            str.append(attr)
            consoleTextView.attributedText = str
        }
        
        consoleTextView.scrollToBottom()
        
        if isInit {
            DispatchQueue.main.asyncAfter(deadline: .now() + (isInit ? 1 : 0)) {
                self.consoleTextView.scrollToBottom()
            }
        }
    }
    
    
    // MARK: Input
    @IBOutlet weak var inputContainerView: UIView!
    private var  messageInputView = MessageInputView()
    
    func setupInputView() {
        inputContainerView.bottomAnchor.constraint(equalTo: view.keyboardLayoutGuide.topAnchor).isActive = true
        inputContainerView.addSubview(messageInputView)
        
        messageInputView.translatesAutoresizingMaskIntoConstraints = false
        messageInputView.topAnchor.constraint(equalTo: inputContainerView.topAnchor).isActive = true
        messageInputView.leadingAnchor.constraint(equalTo: inputContainerView.leadingAnchor).isActive = true
        messageInputView.trailingAnchor.constraint(equalTo: inputContainerView.trailingAnchor).isActive = true
        messageInputView.bottomAnchor.constraint(equalTo: inputContainerView.bottomAnchor).isActive = true
        messageInputView.addTarget(self, action: #selector(inputViewPrimaryActionTriggered(inputView:)), for: .primaryActionTriggered)
    }
    
    @objc func keyboardWillShow(_ notification: Notification) {
        consoleTextView.scrollToBottom()
    }
    
    @objc func inputViewPrimaryActionTriggered(inputView: MessageInputView) {
        activeSocket?.send(input: inputView.message)
    }
}
