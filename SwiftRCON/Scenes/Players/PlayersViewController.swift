//
//  PlayersViewController.swift
//  SwiftRCON
//
//  Created by LeeSeGun on 2022/01/10.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlayersDisplayLogic: AnyObject {
    func displayFetchPlayerList(viewModel: Players.FetchPlayerList.ViewModel)
}

class PlayersViewController: UITableViewController, PlayersDisplayLogic {
    var interactor: PlayersBusinessLogic?
    var router: (NSObjectProtocol & PlayersRoutingLogic & PlayersDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PlayersInteractor()
        let presenter = PlayersPresenter()
        let router = PlayersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Players"
        handleNotifications()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchPlayerList()
    }

    
    // MARK: Noticication
    func handleNotifications() {
        NotificationCenter.default.addObserver(forName: .SocketDidConnect, object: nil, queue: .main) { [weak self] _ in
            self?.fetchPlayerList()
        }
        NotificationCenter.default.addObserver(forName: .SocketDidDisconnect, object: nil, queue: .main) { [weak self] _ in
            self?.viewModel = nil
            self?.tableView.reloadData()
        }
    }
    
    
    // MARK: FETCH
    var viewModel: Players.FetchPlayerList.ViewModel?
    func fetchPlayerList() {
        interactor?.fetchPlayerList(request: .init(connectInfo: currentConnectInfo))
    }
    
    func displayFetchPlayerList(viewModel: Players.FetchPlayerList.ViewModel) {
        self.viewModel = viewModel
        tableView.reloadData()
    }
}


// MARK: - UITableView
extension PlayersViewController {
    override func numberOfSections(in tableView: UITableView) -> Int {
        1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        viewModel?.players.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        nil
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell: PlayersCell = tableView.dequeueReusableCell(withIdentifier: "PCELL", for: indexPath) as? PlayersCell else { return UITableViewCell() }
        guard let viewModel = viewModel else { return cell }
        cell.playerName.text = viewModel.players[indexPath.row].displayName
        cell.connectedTime.text = viewModel.players[indexPath.row].connectedTime
        cell.ping.text = "Ping: \(viewModel.players[indexPath.row].ping)"
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    }
    
    override func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
    }
    
}
